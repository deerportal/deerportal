name: Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v0.9.0, v1.0.0, etc.
  workflow_dispatch:  # Allow manual triggering
    inputs:
      version:
        description: 'Version to build (e.g., 0.9.0)'
        required: true
        default: '0.9.0'
      test_mode:
        description: 'Test mode (builds packages but skips GitHub release creation)'
        type: boolean
        default: false

env:
  BUILD_TYPE: Release

jobs:
  # macOS Build with DMG creation
  build-macos:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Test Mode Notification
      if: inputs.test_mode
      run: |
        echo "🧪 ====================================="
        echo "🧪 TEST MODE ENABLED"
        echo "🧪 This build will create packages but"
        echo "🧪 will NOT create a GitHub release"
        echo "🧪 ====================================="

    - name: Get version from tag or input
      id: get_version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/v}
        fi
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        echo "Building version: ${VERSION}"

    - name: Update version.txt
      run: |
        echo "${{ steps.get_version.outputs.VERSION }}" > version.txt
        cat version.txt

    - name: Install dependencies
      run: |
        brew update
        brew install cmake

    - name: Install SFML 3.0.1
      run: |
        # Build SFML 3.0.1 from source for macOS
        git clone --depth 1 --branch 3.0.1 https://github.com/SFML/SFML.git sfml-source
        cd sfml-source
        cmake -B build \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 \
          -DSFML_BUILD_EXAMPLES=OFF \
          -DSFML_BUILD_DOC=OFF \
          -DBUILD_SHARED_LIBS=OFF \
          -DCMAKE_INSTALL_PREFIX=/usr/local
        cmake --build build -j$(sysctl -n hw.ncpu) --config Release
        sudo cmake --install build
        cd ..
        rm -rf sfml-source

    - name: Configure CMake
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 \
          -DSFML_STATIC_LIBRARIES=ON

    - name: Build
      run: |
        cmake --build build --config ${{ env.BUILD_TYPE }} -j$(sysctl -n hw.ncpu)

    - name: Create DMG package
      run: |
        cd build
        echo "=== Build directory contents ==="
        ls -la
        echo "=== Looking for app bundle ==="
        find . -name "*.app" -type d
        echo "=== Checking Makefile targets ==="
        make help | grep -E "(dmg|package)" || echo "Custom targets not found in help"
        echo "=== Creating DMG package ==="
        make dmg || {
          echo "=== make dmg failed, creating DMG manually ==="
          # Fallback: Create DMG manually using the same approach as in CMakeLists.txt
          VERSION_FROM_FILE=$(cat ../version.txt || echo "0.9.0")
          DMG_NAME="DeerPortal-${VERSION_FROM_FILE}-macOS"
          DMG_TEMP_DIR="dmg_temp"
          
          # Clean and create temp directory
          rm -rf "${DMG_TEMP_DIR}" "${DMG_NAME}".dmg "${DMG_NAME}"-temp.dmg
          mkdir -p "${DMG_TEMP_DIR}"
          
          # Find and copy app bundle
          APP_BUNDLE=$(find . -name "DeerPortal.app" -type d | head -1)
          if [ -n "$APP_BUNDLE" ]; then
            cp -R "$APP_BUNDLE" "${DMG_TEMP_DIR}/"
            codesign --force --deep --sign - "${DMG_TEMP_DIR}/DeerPortal.app" 2>/dev/null || true
            
            # Copy background and create symlink
            cp ../packaging/dmg_background.png "${DMG_TEMP_DIR}/.background.png" 2>/dev/null || true
            ln -s /Applications "${DMG_TEMP_DIR}/Applications"
            
            # Create DMG
            hdiutil create -volname "${DMG_NAME}" -srcfolder "${DMG_TEMP_DIR}" -ov -format UDRW "${DMG_NAME}-temp.dmg"
            hdiutil convert "${DMG_NAME}-temp.dmg" -format UDBZ -o "${DMG_NAME}.dmg"
            
            # Clean up
            rm -rf "${DMG_TEMP_DIR}" "${DMG_NAME}-temp.dmg"
            echo "✅ DMG created manually: ${DMG_NAME}.dmg"
            ls -lh "${DMG_NAME}.dmg"
          else
            echo "❌ No app bundle found for DMG creation"
            exit 1
          fi
        }

    - name: Upload DMG artifact
      uses: actions/upload-artifact@v4
      with:
        name: DeerPortal-${{ steps.get_version.outputs.VERSION }}-macOS-dmg
        path: build/DeerPortal-*-macOS.dmg
        retention-days: 30

    - name: Upload to Release
      if: github.event_name == 'push' && !inputs.test_mode
      uses: softprops/action-gh-release@v2
      with:
        files: build/DeerPortal-*-macOS.dmg
        tag_name: ${{ github.ref }}
        name: DeerPortal v${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: false
        fail_on_unmatched_files: false
        body: |
          ## DeerPortal v${{ steps.get_version.outputs.VERSION }}
          
          ### macOS Installation
          1. Download `DeerPortal-${{ steps.get_version.outputs.VERSION }}-macOS.dmg`
          2. Open the DMG file
          3. Drag DeerPortal.app to Applications folder
          4. Launch from Applications
          
          ### System Requirements
          - macOS 10.15 (Catalina) or later
          - 4GB RAM recommended
          - Graphics card with OpenGL 3.3 support
          
          ### Controls
          - Mouse: Navigate menus and select moves
          - Escape: Exit game
          - Space: Various game actions
          
          Enjoy your journey to becoming a deer! 🦌

  # Windows Build
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version from tag or input
      id: get_version
      shell: bash
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/v}
        fi
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        echo "Building version: ${VERSION}"

    - name: Update version.txt
      shell: bash
      run: |
        echo "${{ steps.get_version.outputs.VERSION }}" > version.txt
        cat version.txt

    - name: Setup MSVC
      uses: microsoft/setup-msbuild@v1.1

    - name: Install NSIS
      run: |
        choco install nsis -y
        echo "NSIS installed successfully"
        echo "Adding NSIS to PATH"
        echo "C:\Program Files (x86)\NSIS" >> $GITHUB_PATH
        echo "Checking NSIS installation:"
        ls "C:\Program Files (x86)\NSIS" || echo "NSIS not found in default location"

    - name: Install SFML 3.0.1
      shell: bash
      run: |
        # Download and build SFML 3.0.1 for Windows
        git clone --depth 1 --branch 3.0.1 https://github.com/SFML/SFML.git sfml-source
        cd sfml-source
        cmake -B build \
          -DCMAKE_BUILD_TYPE=Release \
          -DSFML_BUILD_EXAMPLES=OFF \
          -DSFML_BUILD_DOC=OFF \
          -DBUILD_SHARED_LIBS=OFF \
          -DCMAKE_INSTALL_PREFIX="C:/SFML"
        cmake --build build --config Release
        cmake --install build
        cd ..
        rm -rf sfml-source

    - name: Configure CMake
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_PREFIX_PATH="C:/SFML"

    - name: Build
      run: |
        cmake --build build --config ${{ env.BUILD_TYPE }}

    - name: Create Windows package
      run: |
        cd build
        echo "=== Creating Windows package ==="
        echo "Checking if makensis is available:"
        where makensis || echo "makensis not found"
        echo "=== Build directory contents ==="
        ls -la
        echo "=== Looking for DeerPortal executable ==="
        find . -name "DeerPortal*" -type f
        echo "=== Available CPack generators ==="
        cpack --help | grep -A 20 "The following generators are available"
        echo "=== Trying make package ==="
        make package || {
          echo "=== make package failed, trying direct CPack ==="
          cpack -G NSIS --verbose || {
            echo "NSIS packaging failed, trying ZIP fallback"
            cpack -G ZIP --verbose || echo "All packaging methods failed"
          }
        }

    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: DeerPortal-${{ steps.get_version.outputs.VERSION }}-Windows-installer
        path: |
          build/DeerPortal-*-Windows.exe
          build/DeerPortal-*-Windows.zip
        retention-days: 30

    - name: Upload to Release
      if: github.event_name == 'push' && !inputs.test_mode
      uses: softprops/action-gh-release@v2
      with:
        files: |
          build/DeerPortal-*-Windows.exe
          build/DeerPortal-*-Windows.zip
        tag_name: ${{ github.ref }}
        # Add files to existing release (macOS job creates the release)
        fail_on_unmatched_files: false
        make_latest: false

  # Linux Build
  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version from tag or input
      id: get_version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/v}
        fi
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        echo "Building version: ${VERSION}"

    - name: Update version.txt
      run: |
        echo "${{ steps.get_version.outputs.VERSION }}" > version.txt
        cat version.txt

    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y \
          build-essential \
          cmake \
          git \
          libfreetype6-dev \
          libopenal-dev \
          libvorbis-dev \
          libflac-dev \
          libudev-dev \
          libgl1-mesa-dev \
          libxrandr-dev \
          libxcursor-dev \
          libxi-dev \
          libx11-dev \
          pkg-config

    - name: Install SFML 3.0.1
      run: |
        git clone --depth 1 --branch 3.0.1 https://github.com/SFML/SFML.git sfml-source
        cd sfml-source
        cmake -B build \
          -DCMAKE_BUILD_TYPE=Release \
          -DSFML_BUILD_EXAMPLES=OFF \
          -DSFML_BUILD_DOC=OFF \
          -DBUILD_SHARED_LIBS=OFF \
          -DCMAKE_INSTALL_PREFIX=/usr/local
        cmake --build build -j$(nproc) --config Release
        sudo cmake --install build
        cd ..
        rm -rf sfml-source

    - name: Configure CMake
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DSFML_STATIC_LIBRARIES=ON

    - name: Build
      run: |
        cmake --build build --config ${{ env.BUILD_TYPE }} -j$(nproc)

    - name: Create Linux packages
      run: |
        cd build
        echo "=== Build directory contents ==="
        ls -la
        echo "=== Looking for DeerPortal executable ==="
        find . -name "DeerPortal" -type f
        echo "=== Fixing permissions ==="
        chmod +x DeerPortal || true
        echo "=== Available package targets ==="
        make help | grep -E "(package|cpack)" || echo "Package targets not found"
        echo "=== Creating packages ==="
        make package || {
          echo "=== make package failed, trying direct CPack ==="
          cpack -G TGZ || echo "TGZ packaging failed"
          cpack -G DEB || echo "DEB packaging failed" 
        }

    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: DeerPortal-${{ steps.get_version.outputs.VERSION }}-Linux-packages
        path: |
          build/DeerPortal-*-Linux.tar.gz
          build/DeerPortal-*-Linux.deb
        retention-days: 30

    - name: Upload to Release
      if: github.event_name == 'push' && !inputs.test_mode
      uses: softprops/action-gh-release@v2
      with:
        files: |
          build/DeerPortal-*-Linux.tar.gz
          build/DeerPortal-*-Linux.deb
        tag_name: ${{ github.ref }}
        # Add files to existing release (macOS job creates the release)
        fail_on_unmatched_files: false
        make_latest: false 