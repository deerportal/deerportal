name: Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v0.9.0, v1.0.0, etc.
  workflow_dispatch:  # Allow manual triggering
    inputs:
      version:
        description: 'Version to build (e.g., 0.9.0)'
        required: true
        default: '0.9.0'
      test_mode:
        description: 'Test mode (builds packages but skips GitHub release creation)'
        type: boolean
        default: false

permissions:
  contents: write
  actions: read
  packages: write

env:
  BUILD_TYPE: Release

jobs:
  # Create GitHub Release First (Scout Job)
  create-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Get version from tag or input
      id: get_version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/v}
        fi
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        echo "Creating release for version: ${VERSION}"
        
    - name: Create GitHub Release
      if: github.event_name == 'push' && !inputs.test_mode
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref }}
        name: DeerPortal v${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: false
        body: |
          ## DeerPortal v${{ steps.get_version.outputs.VERSION }}
          
          ### Installation Instructions
          
          #### macOS
          1. Download `DeerPortal-${{ steps.get_version.outputs.VERSION }}-macOS.dmg`
          2. Open the DMG file
          3. Drag DeerPortal.app to Applications folder
          4. Launch from Applications
          
          #### Windows
          1. Download `DeerPortal-${{ steps.get_version.outputs.VERSION }}-Windows.exe`
          2. Run the installer
          3. Follow installation wizard
          4. Launch from Start Menu
          
          #### Linux
          
          **Debian/Ubuntu:**
          1. Download `DeerPortal-${{ steps.get_version.outputs.VERSION }}-Linux.deb`
          2. Install with: `sudo dpkg -i DeerPortal-*.deb`
          3. Launch from Applications menu or: `DeerPortal`
          
          **AppImage (Universal):**
          1. Download `DeerPortal-${{ steps.get_version.outputs.VERSION }}-x86_64.AppImage`
          2. Make executable: `chmod +x DeerPortal-*.AppImage`
          3. Run directly: `./DeerPortal-*.AppImage`
          
          **Archive:**
          1. Download `DeerPortal-${{ steps.get_version.outputs.VERSION }}-Linux.tar.gz`
          2. Extract and launch with: `./DeerPortal`
          
          #### Game Documentation
          📖 **Game Handbook**: Download `DeerPortal-Handbook-${{ steps.get_version.outputs.VERSION }}.pdf` for complete game rules, card reference, and strategic gameplay guide.
          
          ### System Requirements
          - **macOS**: 10.15 (Catalina) or later
          - **Windows**: Windows 10 or later
          - **Linux**: Ubuntu 18.04+ or equivalent
          - **RAM**: 4GB recommended
          - **Graphics**: OpenGL 3.3 support
          
          ### Controls
          - Mouse: Navigate menus and select moves
          - Escape: Exit game
          - Space: Various game actions
          
          Enjoy your journey to becoming a deer! 🦌

  # Generate PDF Handbook (Documentation Job)
  generate-handbook-pdf:
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Install LaTeX and Pandoc
      run: |
        sudo apt-get update
        sudo apt-get install -y texlive-latex-extra texlive-fonts-recommended pandoc
        
    - name: Generate PDF from Markdown
      run: |
        # Convert HANDBOOK.md to PDF using pandoc
        pandoc HANDBOOK.md \
          -o "DeerPortal-Handbook-${{ needs.create-release.outputs.version }}.pdf" \
          --pdf-engine=pdflatex \
          --variable=geometry:margin=1in \
          --variable=fontsize:12pt \
          --variable=documentclass:article \
          --table-of-contents \
          --highlight-style=tango
        
        echo "=== Generated PDF ==="
        ls -lh DeerPortal-Handbook-*.pdf
        
    - name: Upload PDF artifact
      uses: actions/upload-artifact@v4
      with:
        name: DeerPortal-Handbook-${{ needs.create-release.outputs.version }}
        path: DeerPortal-Handbook-*.pdf
        retention-days: 30
        
    - name: Upload PDF to Release
      if: github.event_name == 'push' && !inputs.test_mode
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: DeerPortal-Handbook-*.pdf
        tag: ${{ github.ref }}
        overwrite: true
        file_glob: true
      continue-on-error: true

  # macOS Build with DMG creation (Warrior Job 1)
  build-macos:
    runs-on: macos-latest
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Test Mode Notification
      if: inputs.test_mode
      run: |
        echo "🧪 ====================================="
        echo "🧪 TEST MODE ENABLED"
        echo "🧪 This build will create packages but"
        echo "🧪 will NOT create a GitHub release"
        echo "🧪 ====================================="

    - name: Use version from release job
      run: |
        echo "Building version: ${{ needs.create-release.outputs.version }}"

    - name: Update version.txt
      run: |
        echo "${{ needs.create-release.outputs.version }}" > version.txt
        cat version.txt

    - name: Install dependencies
      run: |
        brew update
        brew install cmake

    - name: Install SFML 3.0.1
      run: |
        # Build SFML 3.0.1 from source for macOS
        git clone --depth 1 --branch 3.0.1 https://github.com/SFML/SFML.git sfml-source
        cd sfml-source
        cmake -B build \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 \
          -DSFML_BUILD_EXAMPLES=OFF \
          -DSFML_BUILD_DOC=OFF \
          -DBUILD_SHARED_LIBS=OFF \
          -DCMAKE_INSTALL_PREFIX=/usr/local
        cmake --build build -j$(sysctl -n hw.ncpu) --config Release
        sudo cmake --install build
        cd ..
        rm -rf sfml-source

    - name: Configure CMake
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 \
          -DSFML_STATIC_LIBRARIES=ON

    - name: Build
      run: |
        cmake --build build --config ${{ env.BUILD_TYPE }} -j$(sysctl -n hw.ncpu)

    - name: Create DMG package
      run: |
        cd build
        echo "=== Build directory contents ==="
        ls -la
        echo "=== Looking for app bundle ==="
        find . -name "*.app" -type d
        echo "=== Checking Makefile targets ==="
        make help | grep -E "(dmg|package)" || echo "Custom targets not found in help"
        echo "=== Creating DMG package ==="
        make dmg || {
          echo "=== make dmg failed, creating DMG manually ==="
          # Fallback: Create DMG manually using the same approach as in CMakeLists.txt
          VERSION_FROM_FILE=$(cat ../version.txt || echo "0.9.0")
          DMG_NAME="DeerPortal-${VERSION_FROM_FILE}-macOS"
          DMG_TEMP_DIR="dmg_temp"
          
          # Clean and create temp directory
          rm -rf "${DMG_TEMP_DIR}" "${DMG_NAME}".dmg "${DMG_NAME}"-temp.dmg
          mkdir -p "${DMG_TEMP_DIR}"
          
          # Find and copy app bundle
          APP_BUNDLE=$(find . -name "DeerPortal.app" -type d | head -1)
          if [ -n "$APP_BUNDLE" ]; then
            cp -R "$APP_BUNDLE" "${DMG_TEMP_DIR}/"
            codesign --force --deep --sign - "${DMG_TEMP_DIR}/DeerPortal.app" 2>/dev/null || true
            
            # Copy background and create symlink
            cp ../packaging/dmg_background.png "${DMG_TEMP_DIR}/.background.png" 2>/dev/null || true
            ln -s /Applications "${DMG_TEMP_DIR}/Applications"
            
            # Create DMG
            hdiutil create -volname "${DMG_NAME}" -srcfolder "${DMG_TEMP_DIR}" -ov -format UDRW "${DMG_NAME}-temp.dmg"
            hdiutil convert "${DMG_NAME}-temp.dmg" -format UDBZ -o "${DMG_NAME}.dmg"
            
            # Clean up
            rm -rf "${DMG_TEMP_DIR}" "${DMG_NAME}-temp.dmg"
            echo "✅ DMG created manually: ${DMG_NAME}.dmg"
            ls -lh "${DMG_NAME}.dmg"
          else
            echo "❌ No app bundle found for DMG creation"
            exit 1
          fi
        }

    - name: Upload DMG artifact
      uses: actions/upload-artifact@v4
      with:
        name: DeerPortal-${{ needs.create-release.outputs.version }}-macOS-dmg
        path: |
          build/*.dmg
          build/*DeerPortal*
        retention-days: 30

    - name: Check for macOS packages
      id: check_macos_files
      run: |
        cd build
        echo "=== Checking for package files ==="
        DMG_EXISTS="false"
        
        if ls *.dmg 1> /dev/null 2>&1; then
          echo "DMG files found:"
          ls -la *.dmg
          DMG_EXISTS="true"
        else
          echo "No DMG files found"
        fi
        
        echo "dmg_exists=${DMG_EXISTS}" >> $GITHUB_OUTPUT

    - name: Upload DMG to Release
      if: github.event_name == 'push' && !inputs.test_mode && steps.check_macos_files.outputs.dmg_exists == 'true'
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: build/*.dmg
        tag: ${{ github.ref }}
        overwrite: true
        file_glob: true

  # Windows Build
  build-windows:
    runs-on: windows-latest
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Use version from release job
      run: |
        echo "Building version: ${{ needs.create-release.outputs.version }}"

    - name: Update version.txt
      shell: bash
      run: |
        echo "${{ needs.create-release.outputs.version }}" > version.txt
        cat version.txt

    - name: Setup MSVC
      uses: microsoft/setup-msbuild@v1.1

    - name: Install NSIS
      run: |
        choco install nsis -y
        echo "NSIS installed successfully"
        echo "Adding NSIS to PATH"
        echo "C:\Program Files (x86)\NSIS" >> $GITHUB_PATH
        echo "Checking NSIS installation:"
        ls "C:\Program Files (x86)\NSIS" || echo "NSIS not found in default location"

    - name: Install SFML 3.0.1
      shell: bash
      run: |
        # Download and build SFML 3.0.1 for Windows
        git clone --depth 1 --branch 3.0.1 https://github.com/SFML/SFML.git sfml-source
        cd sfml-source
        cmake -B build \
          -DCMAKE_BUILD_TYPE=Release \
          -DSFML_BUILD_EXAMPLES=OFF \
          -DSFML_BUILD_DOC=OFF \
          -DBUILD_SHARED_LIBS=OFF \
          -DCMAKE_INSTALL_PREFIX="C:/SFML"
        cmake --build build --config Release
        cmake --install build
        cd ..
        rm -rf sfml-source

    - name: Configure CMake
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_PREFIX_PATH="C:/SFML" -DSFML_DIR="C:/SFML/lib/cmake/SFML"

    - name: Build
      run: |
        cmake --build build --config ${{ env.BUILD_TYPE }}

    - name: Create Windows package
      shell: bash
      run: |
        cd build
        echo "=== Creating Windows package ==="
        echo "Checking if makensis is available:"
        which makensis || echo "makensis not found"
        echo "=== Build directory contents ==="
        ls -la
        echo "=== Looking for DeerPortal executable ==="
        find . -name "DeerPortal*" -type f
        echo "=== Trying make package first ==="
        make package || {
          echo "=== make package failed, trying direct CPack ==="
          cpack -G NSIS --verbose || {
            echo "NSIS packaging failed, trying ZIP fallback"
            cpack -G ZIP --verbose
          }
        }
        echo "=== Files created after packaging ==="
        ls -la *.tar.gz *.deb *.zip *.exe *.dmg 2>/dev/null || echo "No packages found with common extensions"
        echo "=== All files in build directory ==="
        find . -maxdepth 1 -type f -name "*DeerPortal*" -o -name "*.exe" -o -name "*.zip" | sort

    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: DeerPortal-${{ needs.create-release.outputs.version }}-Windows-installer
        path: |
          build/*.exe
          build/*.zip
          build/*DeerPortal*
        retention-days: 30

    - name: Debug Windows Build Directory
      shell: bash
      run: |
        cd build
        echo "=== Windows Build Directory Listing ==="
        find . -type f -name "*DeerPortal*" -o -name "*.exe" -o -name "*.zip" -o -name "*.msi" | sort
        echo "=== All files in build directory ==="
        ls -la
        echo "=== CPack generators available ==="
        make help | grep -E "(package|cpack)" || echo "No package targets found"

    - name: Check for Windows packages
      id: check_windows_files
      shell: bash
      run: |
        cd build
        echo "=== Enhanced Windows Package Detection ==="
        
        # Use robust file detection with find command
        EXE_COUNT=$(find . -name "*.exe" -type f | wc -l)
        ZIP_COUNT=$(find . -name "*.zip" -type f | wc -l)
        MSI_COUNT=$(find . -name "*.msi" -type f | wc -l)
        
        # Set existence flags
        EXE_EXISTS=$([[ $EXE_COUNT -gt 0 ]] && echo 'true' || echo 'false')
        ZIP_EXISTS=$([[ $ZIP_COUNT -gt 0 ]] && echo 'true' || echo 'false')
        MSI_EXISTS=$([[ $MSI_COUNT -gt 0 ]] && echo 'true' || echo 'false')
        
        echo "=== Detection Results ==="
        echo "Found $EXE_COUNT EXE files, $ZIP_COUNT ZIP files, $MSI_COUNT MSI files"
        
        if [[ $EXE_COUNT -gt 0 ]]; then
          echo "EXE files found:"
          find . -name "*.exe" -type f -exec ls -la {} \;
        fi
        
        if [[ $ZIP_COUNT -gt 0 ]]; then
          echo "ZIP files found:"
          find . -name "*.zip" -type f -exec ls -la {} \;
        fi
        
        if [[ $MSI_COUNT -gt 0 ]]; then
          echo "MSI files found:"
          find . -name "*.msi" -type f -exec ls -la {} \;
        fi
        
        echo "exe_exists=${EXE_EXISTS}" >> $GITHUB_OUTPUT
        echo "zip_exists=${ZIP_EXISTS}" >> $GITHUB_OUTPUT
        echo "msi_exists=${MSI_EXISTS}" >> $GITHUB_OUTPUT

    - name: Upload Windows EXE to Release
      if: github.event_name == 'push' && !inputs.test_mode && steps.check_windows_files.outputs.exe_exists == 'true'
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: build/*.exe
        tag: ${{ github.ref }}
        overwrite: true
        file_glob: true

    - name: Upload Windows ZIP to Release
      if: github.event_name == 'push' && !inputs.test_mode && steps.check_windows_files.outputs.zip_exists == 'true'
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: build/*.zip
        tag: ${{ github.ref }}
        overwrite: true
        file_glob: true

  # Linux Build
  build-linux:
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Use version from release job
      run: |
        echo "Building version: ${{ needs.create-release.outputs.version }}"

    - name: Update version.txt
      run: |
        echo "${{ needs.create-release.outputs.version }}" > version.txt
        cat version.txt

    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y \
          build-essential \
          cmake \
          git \
          libfreetype6-dev \
          libopenal-dev \
          libvorbis-dev \
          libflac-dev \
          libudev-dev \
          libgl1-mesa-dev \
          libxrandr-dev \
          libxcursor-dev \
          libxi-dev \
          libx11-dev \
          pkg-config

    - name: Install SFML 3.0.1
      run: |
        git clone --depth 1 --branch 3.0.1 https://github.com/SFML/SFML.git sfml-source
        cd sfml-source
        cmake -B build \
          -DCMAKE_BUILD_TYPE=Release \
          -DSFML_BUILD_EXAMPLES=OFF \
          -DSFML_BUILD_DOC=OFF \
          -DBUILD_SHARED_LIBS=OFF \
          -DCMAKE_INSTALL_PREFIX=/usr/local
        cmake --build build -j$(nproc) --config Release
        sudo cmake --install build
        cd ..
        rm -rf sfml-source

    - name: Configure CMake
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DSFML_STATIC_LIBRARIES=ON

    - name: Build
      run: |
        cmake --build build --config ${{ env.BUILD_TYPE }} -j$(nproc)

    - name: Create Linux packages
      run: |
        cd build
        echo "=== Build directory contents ==="
        ls -la
        echo "=== Looking for DeerPortal executable ==="
        find . -name "DeerPortal" -type f
        echo "=== Fixing permissions ==="
        chmod +x DeerPortal || true
        echo "=== Available package targets ==="
        make help | grep -E "(package|cpack)" || echo "Package targets not found"
        echo "=== Creating packages ==="
        make package || {
          echo "=== make package failed, trying direct CPack ==="
          cpack -G TGZ || echo "TGZ packaging failed"
          cpack -G DEB || echo "DEB packaging failed" 
        }
        echo "=== Files created after packaging ==="
        ls -la *.tar.gz *.deb *.zip *.exe *.dmg 2>/dev/null || echo "No packages found with common extensions"
        echo "=== All files in build directory ==="
        find . -maxdepth 1 -type f -name "*DeerPortal*" -o -name "*.tar.gz" -o -name "*.deb" | sort

    - name: Create AppImage
      run: |
        cd build
        echo "=== Creating AppImage package ==="
        
        # Get version from release job
        VERSION="${{ needs.create-release.outputs.version }}"
        echo "Building AppImage for version: $VERSION"
        
        # Download AppImageTool
        echo "Downloading AppImageTool..."
        wget -q -O appimagetool https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
        chmod +x appimagetool
        
        # Create AppDir structure
        echo "Creating AppDir structure..."
        mkdir -p DeerPortal.AppDir/usr/bin
        mkdir -p DeerPortal.AppDir/usr/share/applications
        mkdir -p DeerPortal.AppDir/usr/share/icons/hicolor/256x256/apps
        mkdir -p DeerPortal.AppDir/usr/share/metainfo
        
        # Copy executable and assets
        echo "Copying executable and assets..."
        cp DeerPortal DeerPortal.AppDir/usr/bin/
        mkdir -p DeerPortal.AppDir/usr/share/deerportal/
        cp -r ../assets DeerPortal.AppDir/usr/share/deerportal/
        
        # Create desktop file
        echo "Creating desktop file..."
        cat > DeerPortal.AppDir/usr/share/applications/net.devcarpet.deerportal.desktop << 'EOF'
        [Desktop Entry]
        Name=DeerPortal
        Comment=A hybrid board/card game with elemental mechanics
        Exec=DeerPortal
        Icon=net.devcarpet.deerportal
        Type=Application
        Categories=Game;BoardGame;CardGame;
        Keywords=game;board;card;elemental;strategy;
        StartupNotify=true
        EOF
        
        # Copy icon (using existing packaging icon)
        echo "Copying application icon..."
        if [ -f "../packaging/net.devcarpet.deerportal.png" ]; then
          cp ../packaging/net.devcarpet.deerportal.png DeerPortal.AppDir/usr/share/icons/hicolor/256x256/apps/net.devcarpet.deerportal.png
          cp ../packaging/net.devcarpet.deerportal.png DeerPortal.AppDir/net.devcarpet.deerportal.png
        else
          echo "Warning: Icon file not found, AppImage will use default icon"
        fi
        
        # Copy AppStream metadata if available
        if [ -f "../packaging/net.devcarpet.deerportal.appdata.xml" ]; then
          cp ../packaging/net.devcarpet.deerportal.appdata.xml DeerPortal.AppDir/usr/share/metainfo/
        fi
        
        # Make executable and create symlinks for AppImage requirements
        chmod +x DeerPortal.AppDir/usr/bin/DeerPortal
        ln -sf usr/share/applications/net.devcarpet.deerportal.desktop DeerPortal.AppDir/
        ln -sf usr/share/icons/hicolor/256x256/apps/net.devcarpet.deerportal.png DeerPortal.AppDir/
        
        # Generate AppImage
        echo "Generating AppImage..."
        ./appimagetool DeerPortal.AppDir DeerPortal-${VERSION}-x86_64.AppImage
        
        # Verify AppImage was created
        if [ -f "DeerPortal-${VERSION}-x86_64.AppImage" ]; then
          echo "AppImage created successfully: DeerPortal-${VERSION}-x86_64.AppImage"
          ls -la DeerPortal-${VERSION}-x86_64.AppImage
          file DeerPortal-${VERSION}-x86_64.AppImage
        else
          echo "Error: AppImage creation failed"
          exit 1
        fi

    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: DeerPortal-${{ needs.create-release.outputs.version }}-Linux-packages
        path: |
          build/*.tar.gz
          build/*.deb
          build/*.AppImage
          build/*DeerPortal*
        retention-days: 30

    - name: Debug Build Directory
      run: |
        cd build
        echo "=== Complete Build Directory Listing ==="
        find . -type f -name "*DeerPortal*" -o -name "*.tar.gz" -o -name "*.deb" -o -name "*.AppImage" | sort
        echo "=== All files in build directory ==="
        ls -la
        echo "=== CPack generators available ==="
        make help | grep -E "(package|cpack)" || echo "No package targets found"

    - name: Check for Linux packages
      id: check_linux_files
      run: |
        cd build
        echo "=== Enhanced Package File Detection ==="
        
        # Use robust file detection with find command
        TGZ_COUNT=$(find . -name "*.tar.gz" -type f | wc -l)
        DEB_COUNT=$(find . -name "*.deb" -type f | wc -l)
        APPIMAGE_COUNT=$(find . -name "*.AppImage" -type f | wc -l)
        
        # Set existence flags
        TGZ_EXISTS=$([[ $TGZ_COUNT -gt 0 ]] && echo 'true' || echo 'false')
        DEB_EXISTS=$([[ $DEB_COUNT -gt 0 ]] && echo 'true' || echo 'false')
        APPIMAGE_EXISTS=$([[ $APPIMAGE_COUNT -gt 0 ]] && echo 'true' || echo 'false')
        
        echo "=== Detection Results ==="
        echo "Found $TGZ_COUNT TGZ files, $DEB_COUNT DEB files, $APPIMAGE_COUNT AppImage files"
        
        if [[ $TGZ_COUNT -gt 0 ]]; then
          echo "TGZ files found:"
          find . -name "*.tar.gz" -type f -exec ls -la {} \;
        fi
        
        if [[ $DEB_COUNT -gt 0 ]]; then
          echo "DEB files found:"
          find . -name "*.deb" -type f -exec ls -la {} \;
        fi
        
        if [[ $APPIMAGE_COUNT -gt 0 ]]; then
          echo "AppImage files found:"
          find . -name "*.AppImage" -type f -exec ls -la {} \;
        fi
        
        echo "tgz_exists=${TGZ_EXISTS}" >> $GITHUB_OUTPUT
        echo "deb_exists=${DEB_EXISTS}" >> $GITHUB_OUTPUT
        echo "appimage_exists=${APPIMAGE_EXISTS}" >> $GITHUB_OUTPUT

    - name: Upload Linux TGZ to Release
      id: upload_tgz
      if: github.event_name == 'push' && !inputs.test_mode && steps.check_linux_files.outputs.tgz_exists == 'true'
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: build/*.tar.gz
        tag: ${{ github.ref }}
        overwrite: true
        file_glob: true
      continue-on-error: true

    - name: Upload Linux DEB to Release
      if: github.event_name == 'push' && !inputs.test_mode && steps.check_linux_files.outputs.deb_exists == 'true'
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: build/*.deb
        tag: ${{ github.ref }}
        overwrite: true
        file_glob: true

    - name: Upload Linux AppImage to Release
      if: github.event_name == 'push' && !inputs.test_mode && steps.check_linux_files.outputs.appimage_exists == 'true'
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: build/*.AppImage
        tag: ${{ github.ref }}
        overwrite: true
        file_glob: true 