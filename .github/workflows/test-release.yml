name: Test Release Pipeline

on:
  workflow_dispatch:  # Manual triggering only
    inputs:
      version:
        description: 'Version to test build (e.g., 0.9.1-test)'
        required: true
        default: '0.9.1-test'
      platforms:
        description: 'Platforms to test (comma-separated: macos,windows,linux or all)'
        required: true
        default: 'all'

permissions:
  contents: read
  actions: read

env:
  BUILD_TYPE: Release

jobs:
  # Generate PDF Handbook (Documentation Job - TEST)
  test-handbook-pdf:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Test Build Notice
      run: |
        echo "🧪 ====================================="
        echo "🧪 TEST BUILD - PDF Handbook Generation"
        echo "🧪 Version: ${{ github.event.inputs.version }}"
        echo "🧪 No GitHub release will be created"
        echo "🧪 ====================================="
        
    - name: Install LaTeX and Pandoc
      run: |
        sudo apt-get update
        sudo apt-get install -y texlive-latex-extra texlive-fonts-recommended pandoc
        
    - name: Generate PDF from Markdown
      run: |
        # Convert HANDBOOK.md to PDF using pandoc
        pandoc HANDBOOK.md \
          -o "DeerPortal-Handbook-${{ github.event.inputs.version }}.pdf" \
          --pdf-engine=pdflatex \
          --variable=geometry:margin=1in \
          --variable=fontsize:12pt \
          --variable=documentclass:article \
          --table-of-contents \
          --highlight-style=tango
        
        echo "=== Generated PDF ==="
        ls -lh DeerPortal-Handbook-*.pdf
        
    - name: Upload PDF artifact
      uses: actions/upload-artifact@v4
      with:
        name: DeerPortal-Handbook-${{ github.event.inputs.version }}-TEST
        path: DeerPortal-Handbook-*.pdf
        retention-days: 7

  # macOS Build with DMG creation (TEST)
  test-macos:
    runs-on: macos-latest
    if: contains(github.event.inputs.platforms, 'macos') || github.event.inputs.platforms == 'all'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Test Build Notice
      run: |
        echo "🧪 ====================================="
        echo "🧪 TEST BUILD - macOS"
        echo "🧪 Version: ${{ github.event.inputs.version }}"
        echo "🧪 No GitHub release will be created"
        echo "🧪 ====================================="

    - name: Get version from input
      id: get_version
      run: |
        VERSION="${{ github.event.inputs.version }}"
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        echo "Building test version: ${VERSION}"

    - name: Update version.txt
      run: |
        echo "${{ steps.get_version.outputs.VERSION }}" > version.txt
        cat version.txt

    - name: Install dependencies
      run: |
        brew update
        brew install cmake

    - name: Install SFML 3.0.1
      run: |
        # Build SFML 3.0.1 from source for macOS
        git clone --depth 1 --branch 3.0.1 https://github.com/SFML/SFML.git sfml-source
        cd sfml-source
        cmake -B build \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 \
          -DSFML_BUILD_EXAMPLES=OFF \
          -DSFML_BUILD_DOC=OFF \
          -DBUILD_SHARED_LIBS=OFF \
          -DCMAKE_INSTALL_PREFIX=/usr/local
        cmake --build build -j$(sysctl -n hw.ncpu) --config Release
        sudo cmake --install build
        cd ..
        rm -rf sfml-source

    - name: Configure CMake
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 \
          -DSFML_STATIC_LIBRARIES=ON

    - name: Build
      run: |
        cmake --build build --config ${{ env.BUILD_TYPE }} -j$(sysctl -n hw.ncpu)

    - name: Create DMG package (TEST)
      run: |
        cd build
        echo "=== Build directory contents ==="
        ls -la
        echo "=== Looking for app bundle ==="
        find . -name "*.app" -type d
        echo "=== Creating test DMG package ==="
        make dmg || echo "DMG creation failed - but this is a test"

    - name: Upload Test DMG Artifact
      uses: actions/upload-artifact@v4
      with:
        name: TEST-DeerPortal-${{ steps.get_version.outputs.VERSION }}-macOS-dmg
        path: build/DeerPortal-*-macOS.dmg
        retention-days: 7  # Shorter retention for tests

  # Windows Build (TEST)
  test-windows:
    runs-on: windows-latest
    if: contains(github.event.inputs.platforms, 'windows') || github.event.inputs.platforms == 'all'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Test Build Notice
      shell: bash
      run: |
        echo "🧪 ====================================="
        echo "🧪 TEST BUILD - Windows"
        echo "🧪 Version: ${{ github.event.inputs.version }}"
        echo "🧪 No GitHub release will be created"
        echo "🧪 ====================================="

    - name: Get version from input
      id: get_version
      shell: bash
      run: |
        VERSION="${{ github.event.inputs.version }}"
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        echo "Building test version: ${VERSION}"

    - name: Update version.txt
      shell: bash
      run: |
        echo "${{ steps.get_version.outputs.VERSION }}" > version.txt
        cat version.txt

    - name: Setup MSVC
      uses: microsoft/setup-msbuild@v1.1

    - name: Install NSIS
      run: |
        choco install nsis -y
        echo "NSIS installed successfully"
        echo "Adding NSIS to PATH"
        echo "C:\Program Files (x86)\NSIS" >> $GITHUB_PATH
        echo "Checking NSIS installation:"
        ls "C:\Program Files (x86)\NSIS" || echo "NSIS not found in default location"

    - name: Install SFML 3.0.1
      shell: bash
      run: |
        # Download and build SFML 3.0.1 for Windows
        git clone --depth 1 --branch 3.0.1 https://github.com/SFML/SFML.git sfml-source
        cd sfml-source
        cmake -B build \
          -DCMAKE_BUILD_TYPE=Release \
          -DSFML_BUILD_EXAMPLES=OFF \
          -DSFML_BUILD_DOC=OFF \
          -DBUILD_SHARED_LIBS=OFF \
          -DCMAKE_INSTALL_PREFIX="C:/SFML"
        cmake --build build --config Release
        cmake --install build
        cd ..
        rm -rf sfml-source

    - name: Configure CMake
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_PREFIX_PATH="C:/SFML"

    - name: Build
      run: |
        cmake --build build --config ${{ env.BUILD_TYPE }}

    - name: Create Windows package (TEST)
      shell: bash
      run: |
        cd build
        echo "=== Creating test Windows package ==="
        echo "Checking if makensis is available:"
        which makensis || echo "makensis not found"
        echo "=== Build directory contents ==="
        ls -la
        echo "=== Looking for DeerPortal executable ==="
        find . -name "DeerPortal*" -type f
        echo "=== Available CPack generators ==="
        cpack --help | grep -A 10 -i "generator" || echo "Could not list generators, continuing with packaging"
        echo "=== Trying make package ==="
        make package || {
          echo "=== make package failed, trying direct CPack ==="
          cpack -G NSIS --verbose || {
            echo "NSIS packaging failed, trying ZIP fallback"
            cpack -G ZIP --verbose || echo "All packaging methods failed - but this is a test"
          }
        }
        echo "=== Files created after packaging ==="
        ls -la *.tar.gz *.deb *.zip *.exe *.dmg 2>/dev/null || echo "No packages found with common extensions"
        echo "=== All files in build directory ==="
        find . -maxdepth 1 -type f -name "*DeerPortal*" -o -name "*.exe" -o -name "*.zip" | sort

    - name: Debug Windows Build Directory (TEST)
      shell: bash
      run: |
        cd build
        echo "=== Windows Build Directory Listing (TEST) ==="
        find . -type f -name "*DeerPortal*" -o -name "*.exe" -o -name "*.zip" -o -name "*.msi" | sort
        echo "=== All files in build directory ==="
        ls -la
        echo "=== CPack generators available ==="
        make help | grep -E "(package|cpack)" || echo "No package targets found"

    - name: Check for Windows packages (TEST)
      id: check_windows_files
      shell: bash
      run: |
        cd build
        echo "=== Enhanced Windows Package Detection (TEST) ==="
        
        # Use robust file detection with find command
        EXE_COUNT=$(find . -name "*.exe" -type f | wc -l)
        ZIP_COUNT=$(find . -name "*.zip" -type f | wc -l)
        MSI_COUNT=$(find . -name "*.msi" -type f | wc -l)
        
        # Set existence flags
        EXE_EXISTS=$([[ $EXE_COUNT -gt 0 ]] && echo 'true' || echo 'false')
        ZIP_EXISTS=$([[ $ZIP_COUNT -gt 0 ]] && echo 'true' || echo 'false')
        MSI_EXISTS=$([[ $MSI_COUNT -gt 0 ]] && echo 'true' || echo 'false')
        
        echo "=== Detection Results (TEST) ==="
        echo "Found $EXE_COUNT EXE files, $ZIP_COUNT ZIP files, $MSI_COUNT MSI files"
        
        if [[ $EXE_COUNT -gt 0 ]]; then
          echo "EXE files found:"
          find . -name "*.exe" -type f -exec ls -la {} \;
        fi
        
        if [[ $ZIP_COUNT -gt 0 ]]; then
          echo "ZIP files found:"
          find . -name "*.zip" -type f -exec ls -la {} \;
        fi
        
        if [[ $MSI_COUNT -gt 0 ]]; then
          echo "MSI files found:"
          find . -name "*.msi" -type f -exec ls -la {} \;
        fi
        
        echo "exe_exists=${EXE_EXISTS}" >> $GITHUB_OUTPUT
        echo "zip_exists=${ZIP_EXISTS}" >> $GITHUB_OUTPUT
        echo "msi_exists=${MSI_EXISTS}" >> $GITHUB_OUTPUT

    - name: Upload Test Windows Artifact
      uses: actions/upload-artifact@v4
      with:
        name: TEST-DeerPortal-${{ steps.get_version.outputs.VERSION }}-Windows-installer
        path: |
          build/*.exe
          build/*.zip
          build/*DeerPortal*
        retention-days: 7  # Shorter retention for tests
      continue-on-error: true

  # Linux Build (TEST)
  test-linux:
    runs-on: ubuntu-latest
    if: contains(github.event.inputs.platforms, 'linux') || github.event.inputs.platforms == 'all'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Test Build Notice
      run: |
        echo "🧪 ====================================="
        echo "🧪 TEST BUILD - Linux"
        echo "🧪 Version: ${{ github.event.inputs.version }}"
        echo "🧪 No GitHub release will be created"
        echo "🧪 ====================================="

    - name: Get version from input
      id: get_version
      run: |
        VERSION="${{ github.event.inputs.version }}"
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        echo "Building test version: ${VERSION}"

    - name: Update version.txt
      run: |
        echo "${{ steps.get_version.outputs.VERSION }}" > version.txt
        cat version.txt

    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y \
          build-essential \
          cmake \
          git \
          libfreetype6-dev \
          libopenal-dev \
          libvorbis-dev \
          libflac-dev \
          libudev-dev \
          libgl1-mesa-dev \
          libxrandr-dev \
          libxcursor-dev \
          libxi-dev \
          libx11-dev \
          pkg-config \
          fuse \
          libfuse2 \
          libfuse-dev

    - name: Setup FUSE for AppImage (TEST)
      run: |
        echo "=== Setting up FUSE for AppImage creation (TEST) ==="
        
        # Enable FUSE user access
        sudo modprobe fuse
        sudo chmod 666 /dev/fuse
        
        # Create fuse group if it doesn't exist
        if ! getent group fuse > /dev/null 2>&1; then
          echo "Creating fuse group..."
          sudo groupadd fuse
        else
          echo "FUSE group already exists"
        fi
        
        # Add user to fuse group
        sudo usermod -a -G fuse $USER
        
        # Apply group changes immediately (create new shell session)
        echo "Applying group changes..."
        newgrp fuse << 'EOFGRP'
        echo "Group changes applied successfully"
        EOFGRP
        
        # Verify FUSE is working
        echo "Testing FUSE availability..."
        if fusermount -V; then
          echo "✅ FUSE is available and working"
        else
          echo "❌ FUSE setup failed"
          exit 1
        fi
        
        # Show FUSE status
        echo "FUSE module status:"
        lsmod | grep fuse || echo "FUSE module not loaded"
        echo "FUSE device permissions:"
        ls -la /dev/fuse
        echo "Current user groups:"
        groups

    - name: Install SFML 3.0.1
      run: |
        git clone --depth 1 --branch 3.0.1 https://github.com/SFML/SFML.git sfml-source
        cd sfml-source
        cmake -B build \
          -DCMAKE_BUILD_TYPE=Release \
          -DSFML_BUILD_EXAMPLES=OFF \
          -DSFML_BUILD_DOC=OFF \
          -DBUILD_SHARED_LIBS=OFF \
          -DCMAKE_INSTALL_PREFIX=/usr/local
        cmake --build build -j$(nproc) --config Release
        sudo cmake --install build
        cd ..
        rm -rf sfml-source

    - name: Configure CMake
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DSFML_STATIC_LIBRARIES=ON

    - name: Build
      run: |
        cmake --build build --config ${{ env.BUILD_TYPE }} -j$(nproc)

    - name: Create Linux packages (TEST)
      run: |
        cd build
        echo "=== Creating test Linux packages ==="
        echo "=== Build directory contents ==="
        ls -la
        echo "=== Looking for DeerPortal executable ==="
        find . -name "DeerPortal" -type f
        echo "=== Fixing permissions ==="
        chmod +x DeerPortal || true
        echo "=== Available package targets ==="
        make help | grep -E "(package|cpack)" || echo "Package targets not found"
        echo "=== Creating packages ==="
        make package || {
          echo "=== make package failed, trying direct CPack ==="
          cpack -G TGZ || echo "TGZ packaging failed - but this is a test"
          cpack -G DEB || echo "DEB packaging failed - but this is a test" 
        }
        echo "=== Files created after packaging ==="
        ls -la *.tar.gz *.deb *.zip *.exe *.dmg 2>/dev/null || echo "No packages found with common extensions"
        echo "=== All files in build directory ==="
        find . -maxdepth 1 -type f -name "*DeerPortal*" -o -name "*.tar.gz" -o -name "*.deb" | sort

    - name: Create AppImage (TEST)
      run: |
        cd build
        echo "=== Creating test AppImage package ==="
        
        # Get version from version.txt
        VERSION=$(cat ../version.txt | tr -d '\n')
        echo "Building test AppImage for version: $VERSION"
        
        # Check if DeerPortal executable exists
        if [ ! -f "DeerPortal" ]; then
          echo "ERROR: DeerPortal executable not found in build directory"
          ls -la
          exit 0  # Don't fail test builds
        fi
        echo "DeerPortal executable found: $(ls -la DeerPortal)"
        
        # Download AppImageTool
        echo "Downloading AppImageTool..."
        wget -q -O appimagetool https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
        chmod +x appimagetool
        
        # Verify FUSE is working before proceeding
        echo "Verifying FUSE is ready for AppImageTool (TEST)..."
        if ! fusermount -V >/dev/null 2>&1; then
          echo "❌ FUSE is not available - AppImage creation will fail"
          exit 1
        fi
        echo "✅ FUSE is ready for AppImage creation"
        
        # Create AppDir structure
        echo "Creating AppDir structure..."
        mkdir -p DeerPortal.AppDir/usr/bin
        mkdir -p DeerPortal.AppDir/usr/share/applications
        mkdir -p DeerPortal.AppDir/usr/share/icons/hicolor/256x256/apps
        mkdir -p DeerPortal.AppDir/usr/share/metainfo
        
        # Copy executable and assets
        echo "Copying executable and assets..."
        cp DeerPortal DeerPortal.AppDir/usr/bin/
        mkdir -p DeerPortal.AppDir/usr/share/deerportal/
        cp -r ../assets DeerPortal.AppDir/usr/share/deerportal/
        
        # Create desktop file
        echo "Creating desktop file..."
        cat > DeerPortal.AppDir/usr/share/applications/net.devcarpet.deerportal.desktop << 'EOF'
        [Desktop Entry]
        Name=DeerPortal
        Comment=A hybrid board/card game with elemental mechanics
        Exec=DeerPortal
        Icon=net.devcarpet.deerportal
        Type=Application
        Categories=Game;BoardGame;CardGame;
        Keywords=game;board;card;elemental;strategy;
        StartupNotify=true
        EOF
        
        # Copy icon (using existing packaging icon)
        echo "Copying application icon..."
        if [ -f "../packaging/net.devcarpet.deerportal.png" ]; then
          cp ../packaging/net.devcarpet.deerportal.png DeerPortal.AppDir/usr/share/icons/hicolor/256x256/apps/net.devcarpet.deerportal.png
          cp ../packaging/net.devcarpet.deerportal.png DeerPortal.AppDir/net.devcarpet.deerportal.png
        else
          echo "Warning: Icon file not found, AppImage will use default icon"
        fi
        
        # Copy AppStream metadata if available
        if [ -f "../packaging/net.devcarpet.deerportal.appdata.xml" ]; then
          cp ../packaging/net.devcarpet.deerportal.appdata.xml DeerPortal.AppDir/usr/share/metainfo/
        fi
        
        # Make executable and create symlinks for AppImage requirements
        chmod +x DeerPortal.AppDir/usr/bin/DeerPortal
        ln -sf usr/share/applications/net.devcarpet.deerportal.desktop DeerPortal.AppDir/
        ln -sf usr/share/icons/hicolor/256x256/apps/net.devcarpet.deerportal.png DeerPortal.AppDir/
        
        # Generate AppImage with FUSE (TEST)
        echo "Generating test AppImage with FUSE..."
        ./appimagetool DeerPortal.AppDir DeerPortal-${VERSION}-x86_64.AppImage
        
        # Verify AppImage was created
        if [ -f "DeerPortal-${VERSION}-x86_64.AppImage" ]; then
          echo "Test AppImage created successfully: DeerPortal-${VERSION}-x86_64.AppImage"
          ls -la DeerPortal-${VERSION}-x86_64.AppImage
          file DeerPortal-${VERSION}-x86_64.AppImage
        else
          echo "Error: Test AppImage creation failed - but this is a test"
          echo "=== Debugging AppImage creation failure ==="
          echo "Current directory contents:"
          ls -la
          echo "AppDir structure:"
          find DeerPortal.AppDir -type f | head -20
          echo "=== This is a test build, continuing without AppImage ==="
          # Don't exit 1 here in test mode
        fi

    - name: Debug Build Directory (TEST)
      run: |
        cd build
        echo "=== Complete Build Directory Listing (TEST) ==="
        find . -type f -name "*DeerPortal*" -o -name "*.tar.gz" -o -name "*.deb" -o -name "*.AppImage" | sort
        echo "=== All files in build directory ==="
        ls -la
        echo "=== CPack generators available ==="
        make help | grep -E "(package|cpack)" || echo "No package targets found"

    - name: Check for Linux packages (TEST)
      id: check_linux_files
      run: |
        cd build
        echo "=== Enhanced Package File Detection (TEST) ==="
        
        # Use robust file detection with find command
        TGZ_COUNT=$(find . -name "*.tar.gz" -type f | wc -l)
        DEB_COUNT=$(find . -name "*.deb" -type f | wc -l)
        APPIMAGE_COUNT=$(find . -name "*.AppImage" -type f | wc -l)
        
        # Set existence flags
        TGZ_EXISTS=$([[ $TGZ_COUNT -gt 0 ]] && echo 'true' || echo 'false')
        DEB_EXISTS=$([[ $DEB_COUNT -gt 0 ]] && echo 'true' || echo 'false')
        APPIMAGE_EXISTS=$([[ $APPIMAGE_COUNT -gt 0 ]] && echo 'true' || echo 'false')
        
        echo "=== Detection Results (TEST) ==="
        echo "Found $TGZ_COUNT TGZ files, $DEB_COUNT DEB files, $APPIMAGE_COUNT AppImage files"
        
        if [[ $TGZ_COUNT -gt 0 ]]; then
          echo "TGZ files found:"
          find . -name "*.tar.gz" -type f -exec ls -la {} \;
        fi
        
        if [[ $DEB_COUNT -gt 0 ]]; then
          echo "DEB files found:"
          find . -name "*.deb" -type f -exec ls -la {} \;
        fi
        
        if [[ $APPIMAGE_COUNT -gt 0 ]]; then
          echo "AppImage files found:"
          find . -name "*.AppImage" -type f -exec ls -la {} \;
        fi
        
        echo "tgz_exists=${TGZ_EXISTS}" >> $GITHUB_OUTPUT
        echo "deb_exists=${DEB_EXISTS}" >> $GITHUB_OUTPUT
        echo "appimage_exists=${APPIMAGE_EXISTS}" >> $GITHUB_OUTPUT

    - name: Upload Test Linux Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: TEST-DeerPortal-${{ steps.get_version.outputs.VERSION }}-Linux-packages
        path: |
          build/*.tar.gz
          build/*.deb
          build/*.AppImage
          build/*DeerPortal*
        retention-days: 7  # Shorter retention for tests
      continue-on-error: true

  # Summary job that runs after all builds
  test-summary:
    needs: [test-macos, test-windows, test-linux]
    runs-on: ubuntu-latest
    if: always()  # Run even if some jobs fail
    
    steps:
    - name: Test Results Summary
      run: |
        echo "🧪 ====================================="
        echo "🧪 TEST BUILD SUMMARY"
        echo "🧪 Version: ${{ github.event.inputs.version }}"
        echo "🧪 ====================================="
        echo ""
        echo "macOS Build: ${{ needs.test-macos.result }}"
        echo "Windows Build: ${{ needs.test-windows.result }}"  
        echo "Linux Build: ${{ needs.test-linux.result }}"
        echo ""
        echo "Check the 'Artifacts' section above to download test packages"
        echo "These artifacts will be automatically deleted after 7 days"
        echo ""
        if [[ "${{ needs.test-macos.result }}" == "success" && \
              "${{ needs.test-windows.result }}" == "success" && \
              "${{ needs.test-linux.result }}" == "success" ]]; then
          echo "✅ All builds successful! Ready for production release."
        else
          echo "❌ Some builds failed. Check individual job logs for details."
        fi 