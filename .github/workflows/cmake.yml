name: CMake

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: windows
    
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Debug Environment (Linux)
      if: matrix.platform == 'linux'
      run: |
        echo "=== Environment Debug ==="
        echo "Working directory: $(pwd)"
        echo "Ubuntu version: $(lsb_release -a)"
        echo "Available space: $(df -h .)"
        echo "CMAKE version: $(cmake --version)"
        echo "GCC version: $(gcc --version)"

    - name: Debug Environment (Windows)
      if: matrix.platform == 'windows'
      shell: bash
      run: |
        echo "=== Environment Debug ==="
        echo "Working directory: $(pwd)"
        echo "Windows version: $(systeminfo | findstr /B /C:"OS Name" /C:"OS Version")"
        echo "Available space: $(df -h .)"
        echo "CMAKE version: $(cmake --version)"
        echo "MSVC version: $(cl 2>&1 | head -1 || echo 'MSVC not in PATH yet')"
        
    - name: Install SFML 3.0 Dependencies (Linux)
      if: matrix.platform == 'linux'
      run: |
        echo "=== Installing SFML Dependencies ==="
        sudo apt update
        sudo apt install -y \
          build-essential \
          cmake \
          git \
          libfreetype6-dev \
          libopenal-dev \
          libvorbis-dev \
          libflac-dev \
          libudev-dev \
          libgl1-mesa-dev \
          libxrandr-dev \
          libxcursor-dev \
          libxi-dev \
          libx11-dev \
          pkg-config
        echo "Dependencies installed successfully"

    - name: Setup MSVC (Windows)
      if: matrix.platform == 'windows'
      uses: microsoft/setup-msbuild@v2

    - name: Cache SFML Build (Linux)
      if: matrix.platform == 'linux'
      uses: actions/cache@v4
      id: cache-sfml-linux
      with:
        path: |
          /usr/local/lib/libsfml*
          /usr/local/include/SFML
          /usr/local/lib/cmake/SFML
        key: sfml-3.0.1-ubuntu-${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt') }}

    - name: Cache SFML Build (Windows)
      if: matrix.platform == 'windows'
      uses: actions/cache@v4
      id: cache-sfml-windows
      with:
        path: |
          C:/SFML
        key: sfml-3.0.1-windows-${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt') }}

    - name: Build and Install SFML 3.0 from Source (Linux)
      if: matrix.platform == 'linux' && steps.cache-sfml-linux.outputs.cache-hit != 'true'
      run: |
        echo "=== Building SFML 3.0 from Source ==="
        git clone --depth 1 --branch 3.0.1 https://github.com/SFML/SFML.git sfml-source
        cd sfml-source
        echo "SFML source downloaded, configuring build..."
        cmake -B build \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=/usr/local \
          -DSFML_BUILD_EXAMPLES=OFF \
          -DSFML_BUILD_DOC=OFF \
          -DBUILD_SHARED_LIBS=ON \
          -DSFML_USE_SYSTEM_DEPS=ON
        echo "Building SFML (this may take a few minutes)..."
        cmake --build build -j$(nproc) --config Release
        echo "Installing SFML..."
        sudo cmake --install build
        cd ..
        rm -rf sfml-source
        echo "SFML 3.0.1 installation completed"

    - name: Build and Install SFML 3.0 from Source (Windows)
      if: matrix.platform == 'windows' && steps.cache-sfml-windows.outputs.cache-hit != 'true'
      shell: bash
      run: |
        echo "=== Building SFML 3.0.1 from Source for Windows ==="
        git clone --depth 1 --branch 3.0.1 https://github.com/SFML/SFML.git sfml-source
        cd sfml-source
        echo "SFML source downloaded, configuring build..."
        cmake -B build \
          -DCMAKE_BUILD_TYPE=Release \
          -DSFML_BUILD_EXAMPLES=OFF \
          -DSFML_BUILD_DOC=OFF \
          -DBUILD_SHARED_LIBS=OFF \
          -DCMAKE_INSTALL_PREFIX="C:/SFML"
        echo "Building SFML (this may take a few minutes)..."
        cmake --build build --config Release
        echo "Installing SFML..."
        cmake --install build
        cd ..
        rm -rf sfml-source
        echo "SFML 3.0.1 installation completed"

    - name: Verify SFML Installation (Linux)
      if: matrix.platform == 'linux'
      run: |
        echo "=== Verifying SFML Installation ==="
        echo "Checking SFML libraries:"
        ls -la /usr/local/lib/libsfml* || echo "No SFML libraries found"
        echo "Checking SFML headers:"
        ls -la /usr/local/include/SFML/ || echo "No SFML headers found"
        echo "Checking SFML CMake config:"
        ls -la /usr/local/lib/cmake/SFML/ || echo "No SFML CMake config found"
        echo "PKG_CONFIG_PATH: $PKG_CONFIG_PATH"
        echo "LD_LIBRARY_PATH: $LD_LIBRARY_PATH"

    - name: Verify SFML Installation (Windows)
      if: matrix.platform == 'windows'
      shell: bash
      run: |
        echo "=== Verifying SFML Installation ==="
        echo "Checking SFML installation:"
        ls -la "C:/SFML/" || echo "No SFML installation found"
        echo "Checking SFML libraries:"
        ls -la "C:/SFML/lib/" || echo "No SFML libraries found"
        echo "Checking SFML headers:"
        ls -la "C:/SFML/include/SFML/" || echo "No SFML headers found"

    - name: Configure CMake (Linux)
      if: matrix.platform == 'linux'
      run: |
        echo "=== Configuring CMake ==="
        echo "CMAKE_PREFIX_PATH: $CMAKE_PREFIX_PATH"
        export CMAKE_PREFIX_PATH="/usr/local:$CMAKE_PREFIX_PATH"
        echo "Updated CMAKE_PREFIX_PATH: $CMAKE_PREFIX_PATH"
        cmake -B ${{github.workspace}}/build \
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
          -DCMAKE_PREFIX_PATH=/usr/local \
          -DSFML_DIR=/usr/local/lib/cmake/SFML \
          -DCMAKE_VERBOSE_MAKEFILE=ON

    - name: Configure CMake (Windows)
      if: matrix.platform == 'windows'
      run: |
        echo "=== Configuring CMake for Windows ==="
        cmake -B ${{github.workspace}}/build `
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} `
          -DCMAKE_PREFIX_PATH="C:/SFML" `
          -DSFML_DIR="C:/SFML/lib/cmake/SFML" `
          -DCMAKE_VERBOSE_MAKEFILE=ON

    - name: Build (Linux)
      if: matrix.platform == 'linux'
      run: |
        echo "=== Building DeerPortal for Linux ==="
        cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --verbose

    - name: Build (Windows)
      if: matrix.platform == 'windows'
      run: |
        echo "=== Building DeerPortal for Windows ==="
        cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --verbose

    - name: Test (Linux)
      if: matrix.platform == 'linux'
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{env.BUILD_TYPE}} --verbose

    - name: Test (Windows)
      if: matrix.platform == 'windows'
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{env.BUILD_TYPE}} --verbose
      
