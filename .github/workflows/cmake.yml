name: CMake

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read
  actions: read

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
          - os: windows-latest
            platform: windows
            arch: x64
          - os: macos-latest
            platform: macos
            arch: arm64
    
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Debug Environment (Linux)
      if: matrix.platform == 'linux'
      run: |
        echo "=== Environment Debug ==="
        echo "Working directory: $(pwd)"
        echo "Ubuntu version: $(lsb_release -a)"
        echo "Available space: $(df -h .)"
        echo "CMAKE version: $(cmake --version)"
        echo "GCC version: $(gcc --version)"

    - name: Debug Environment (Windows)
      if: matrix.platform == 'windows'
      shell: bash
      run: |
        echo "=== Environment Debug ==="
        echo "Working directory: $(pwd)"
        echo "Windows version: $(systeminfo | findstr /B /C:"OS Name" /C:"OS Version")"
        echo "Available space: $(df -h .)"
        echo "CMAKE version: $(cmake --version)"
        echo "MSVC version: $(cl 2>&1 | head -1 || echo 'MSVC not in PATH yet')"

    - name: Debug Environment (macOS)
      if: matrix.platform == 'macos'
      run: |
        echo "=== Environment Debug ==="
        echo "Working directory: $(pwd)"
        echo "macOS version: $(sw_vers)"
        echo "Architecture: $(uname -m)"
        echo "Runner architecture: ${{ matrix.arch }}"
        echo "Available space: $(df -h .)"
        echo "CMAKE version: $(cmake --version || echo 'cmake not found')"
        echo "Xcode version: $(xcodebuild -version || echo 'xcodebuild not found')"
        echo "Clang version: $(clang --version || echo 'clang not found')"
        echo "C++ compiler: $(which c++ || echo 'c++ not found')"
        echo "Available compilers:"
        ls -la /usr/bin/*clang* || echo "No clang compilers found in /usr/bin"
        echo "Homebrew prefix: $(brew --prefix || echo 'brew not found')"
        
        # Intel-specific debugging
        if [[ "${{ matrix.arch }}" == "intel" ]]; then
          echo "=== Intel-specific debugging ==="
          echo "Runner OS: ${{ matrix.os }}"
          echo "Expected architecture: x86_64"
          echo "Actual architecture: $(uname -m)"
          echo "Checking Homebrew installation paths:"
          ls -la /usr/local/bin/brew 2>/dev/null || echo "No brew in /usr/local/bin"
          ls -la /opt/homebrew/bin/brew 2>/dev/null || echo "No brew in /opt/homebrew/bin"
          echo "PATH: $PATH"
          echo "Homebrew doctor (quick check):"
          timeout 30s brew doctor || echo "Homebrew doctor failed or timed out"
        fi
        
    - name: Install SFML 3.0 Dependencies (Linux)
      if: matrix.platform == 'linux'
      run: |
        echo "=== Installing SFML Dependencies ==="
        sudo apt update
        sudo apt install -y \
          build-essential \
          cmake \
          git \
          libfreetype6-dev \
          libopenal-dev \
          libvorbis-dev \
          libflac-dev \
          libudev-dev \
          libgl1-mesa-dev \
          libxrandr-dev \
          libxcursor-dev \
          libxi-dev \
          libx11-dev \
          pkg-config
        echo "Dependencies installed successfully"

    - name: Setup MSVC (Windows)
      if: matrix.platform == 'windows'
      uses: microsoft/setup-msbuild@v1.1

    - name: Install NSIS (Windows)
      if: matrix.platform == 'windows'
      run: |
        choco install nsis -y
        echo "NSIS installed successfully"
        echo "Adding NSIS to PATH"
        echo "C:\Program Files (x86)\NSIS" >> $GITHUB_PATH
        echo "Checking NSIS installation:"
        ls "C:\Program Files (x86)\NSIS" || echo "NSIS not found in default location"

    - name: Install Dependencies (macOS)
      if: matrix.platform == 'macos'
      run: |
        echo "=== Installing macOS Dependencies ==="
        
        # Ensure Xcode command line tools are available
        echo "Checking Xcode command line tools..."
        if ! xcode-select -p &> /dev/null; then
          echo "Installing Xcode command line tools..."
          sudo xcode-select --install || echo "Xcode command line tools installation failed or already present"
        else
          echo "Xcode command line tools are available at: $(xcode-select -p)"
        fi
        
        # Accept Xcode license if needed
        sudo xcodebuild -license accept || echo "Xcode license already accepted or xcodebuild not available"
        
        # Install dependencies via Homebrew
        echo "Installing dependencies via Homebrew..."
        brew update || echo "Brew update failed, continuing..."
        
        # Install cmake if not available
        if ! command -v cmake &> /dev/null; then
          echo "Installing cmake via Homebrew..."
          brew install --formula cmake
        else
          echo "cmake is already available: $(which cmake)"
          echo "cmake version: $(cmake --version)"
        fi
        
        # Architecture-specific SFML installation strategy
        if [[ "${{ matrix.arch }}" == "intel" ]]; then
          # For Intel, skip Homebrew SFML and build from source (like release workflow)
          echo "Intel build: Will build SFML from source for consistency with release workflow"
        else
          # ARM installation via Homebrew (working)
          echo "Installing SFML via Homebrew for ARM..."
          brew install --formula sfml || echo "SFML Homebrew installation failed, will build from source"
        fi
        
        echo "macOS dependencies installed successfully"

    - name: Cache SFML Build (Linux)
      if: matrix.platform == 'linux'
      uses: actions/cache@v4
      id: cache-sfml-linux
      with:
        path: |
          /usr/local/lib/libsfml*
          /usr/local/include/SFML
          /usr/local/lib/cmake/SFML
        key: sfml-3.0.1-ubuntu-${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt') }}

    - name: Cache SFML Build (Windows)
      if: matrix.platform == 'windows'
      uses: actions/cache@v4
      id: cache-sfml-windows
      with:
        path: |
          C:/SFML
        key: sfml-3.0.1-windows-${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt') }}

    - name: Cache SFML Build (macOS)
      if: matrix.platform == 'macos'
      uses: actions/cache@v4
      id: cache-sfml-macos
      with:
        path: |
          /usr/local/lib/libsfml*
          /usr/local/include/SFML
          /usr/local/lib/cmake/SFML
        key: sfml-3.0.1-macos-${{ matrix.arch }}-${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt') }}

    - name: Build and Install SFML 3.0 from Source (Linux)
      if: matrix.platform == 'linux' && steps.cache-sfml-linux.outputs.cache-hit != 'true'
      run: |
        echo "=== Building SFML 3.0 from Source ==="
        git clone --depth 1 --branch 3.0.1 https://github.com/SFML/SFML.git sfml-source
        cd sfml-source
        echo "SFML source downloaded, configuring build..."
        cmake -B build \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=/usr/local \
          -DSFML_BUILD_EXAMPLES=OFF \
          -DSFML_BUILD_DOC=OFF \
          -DBUILD_SHARED_LIBS=ON \
          -DSFML_USE_SYSTEM_DEPS=ON
        echo "Building SFML (this may take a few minutes)..."
        cmake --build build -j$(nproc) --config Release
        echo "Installing SFML..."
        sudo cmake --install build
        cd ..
        rm -rf sfml-source
        echo "SFML 3.0.1 installation completed"

    - name: Build and Install SFML 3.0 from Source (Windows)
      if: matrix.platform == 'windows' && steps.cache-sfml-windows.outputs.cache-hit != 'true'
      shell: bash
      run: |
        echo "=== Building SFML 3.0.1 from Source for Windows ==="
        git clone --depth 1 --branch 3.0.1 https://github.com/SFML/SFML.git sfml-source
        cd sfml-source
        echo "SFML source downloaded, configuring build..."
        cmake -B build \
          -DCMAKE_BUILD_TYPE=Release \
          -DSFML_BUILD_EXAMPLES=OFF \
          -DSFML_BUILD_DOC=OFF \
          -DBUILD_SHARED_LIBS=OFF \
          -DCMAKE_INSTALL_PREFIX="C:/SFML"
        echo "Building SFML (this may take a few minutes)..."
        cmake --build build --config Release
        echo "Installing SFML..."
        cmake --install build
        cd ..
        rm -rf sfml-source
        echo "SFML 3.0.1 installation completed"

    - name: Setup SFML (macOS)
      if: matrix.platform == 'macos'
      run: |
        echo "=== Setting up SFML for macOS (${{ matrix.arch }}) ==="
        
        if [[ "${{ matrix.arch }}" == "intel" ]]; then
          # Intel: Always build from source (like release workflow)
          echo "Intel build: Building SFML from source..."
          
          # Only build from source if not cached
          if [[ "${{ steps.cache-sfml-macos.outputs.cache-hit }}" != "true" ]]; then
            echo "Building SFML 3.0.1 from source for Intel..."
            git clone --depth 1 --branch 3.0.1 https://github.com/SFML/SFML.git sfml-source
            cd sfml-source
            
            # Intel-specific configuration (exactly matching release workflow)
            echo "Building for Intel (x86_64) with deployment target 10.15 - matching release workflow"
            
            cmake -B build \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 \
              -DSFML_BUILD_EXAMPLES=OFF \
              -DSFML_BUILD_DOC=OFF \
              -DBUILD_SHARED_LIBS=OFF \
              -DCMAKE_INSTALL_PREFIX=/usr/local
            
            echo "Building SFML for Intel..."
            cmake --build build -j$(sysctl -n hw.ncpu) --config Release
            echo "Installing SFML..."
            sudo cmake --install build
            cd ..
            rm -rf sfml-source
            echo "SFML 3.0.1 built and installed for Intel"
          else
            echo "Using cached SFML installation for Intel"
          fi
          
        else
          # ARM: Use Homebrew if available, otherwise build from source
          if brew list sfml &> /dev/null; then
            echo "SFML is available via Homebrew for ARM"
            echo "SFML Homebrew info:"
            brew info sfml
            echo "SFML files:"
            find $(brew --prefix)/lib -name "*sfml*" 2>/dev/null || echo "No SFML libs found in Homebrew"
            find $(brew --prefix)/include -name "SFML" 2>/dev/null || echo "No SFML headers found in Homebrew"
          else
            echo "SFML not available via Homebrew, building from source for ARM..."
            
            # Only build from source if not cached
            if [[ "${{ steps.cache-sfml-macos.outputs.cache-hit }}" != "true" ]]; then
              echo "Building SFML 3.0.1 from source for ARM..."
              git clone --depth 1 --branch 3.0.1 https://github.com/SFML/SFML.git sfml-source
              cd sfml-source
              
              echo "Building for Apple Silicon with deployment target 11.0"
              
              cmake -B build \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_OSX_DEPLOYMENT_TARGET=11.0 \
                -DSFML_BUILD_EXAMPLES=OFF \
                -DSFML_BUILD_DOC=OFF \
                -DBUILD_SHARED_LIBS=OFF \
                -DCMAKE_INSTALL_PREFIX=/usr/local
              
              echo "Building SFML for ARM..."
              cmake --build build -j$(sysctl -n hw.ncpu) --config Release
              echo "Installing SFML..."
              sudo cmake --install build
              cd ..
              rm -rf sfml-source
              echo "SFML 3.0.1 built and installed for ARM"
            else
              echo "Using cached SFML installation for ARM"
            fi
          fi
        fi

    - name: Verify SFML Installation (Linux)
      if: matrix.platform == 'linux'
      run: |
        echo "=== Verifying SFML Installation ==="
        echo "Checking SFML libraries:"
        ls -la /usr/local/lib/libsfml* || echo "No SFML libraries found"
        echo "Checking SFML headers:"
        ls -la /usr/local/include/SFML/ || echo "No SFML headers found"
        echo "Checking SFML CMake config:"
        ls -la /usr/local/lib/cmake/SFML/ || echo "No SFML CMake config found"
        echo "PKG_CONFIG_PATH: $PKG_CONFIG_PATH"
        echo "LD_LIBRARY_PATH: $LD_LIBRARY_PATH"

    - name: Verify SFML Installation (Windows)
      if: matrix.platform == 'windows'
      shell: bash
      run: |
        echo "=== Verifying SFML Installation ==="
        echo "Checking SFML installation:"
        ls -la "C:/SFML/" || echo "No SFML installation found"
        echo "Checking SFML libraries:"
        ls -la "C:/SFML/lib/" || echo "No SFML libraries found"
        echo "Checking SFML headers:"
        ls -la "C:/SFML/include/SFML/" || echo "No SFML headers found"

    - name: Verify SFML Installation (macOS)
      if: matrix.platform == 'macos'
      run: |
        echo "=== Verifying SFML Installation for macOS (${{ matrix.arch }}) ==="
        echo "Checking SFML libraries:"
        ls -la /usr/local/lib/libsfml* || echo "No SFML libraries found"
        echo "Checking SFML headers:"
        ls -la /usr/local/include/SFML/ || echo "No SFML headers found"
        echo "Checking SFML CMake config:"
        ls -la /usr/local/lib/cmake/SFML/ || echo "No SFML CMake config found"
        echo "Architecture check:"
        file /usr/local/lib/libsfml-system.a 2>/dev/null || echo "Could not check architecture of SFML libraries"

    - name: Configure CMake (Linux)
      if: matrix.platform == 'linux'
      run: |
        echo "=== Configuring CMake ==="
        echo "CMAKE_PREFIX_PATH: $CMAKE_PREFIX_PATH"
        export CMAKE_PREFIX_PATH="/usr/local:$CMAKE_PREFIX_PATH"
        echo "Updated CMAKE_PREFIX_PATH: $CMAKE_PREFIX_PATH"
        cmake -B ${{github.workspace}}/build \
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
          -DCMAKE_PREFIX_PATH=/usr/local \
          -DSFML_DIR=/usr/local/lib/cmake/SFML \
          -DCMAKE_VERBOSE_MAKEFILE=ON

    - name: Configure CMake (Windows)
      if: matrix.platform == 'windows'
      run: |
        echo "=== Configuring CMake for Windows ==="
        cmake -B ${{github.workspace}}/build `
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} `
          -DCMAKE_PREFIX_PATH="C:/SFML" `
          -DSFML_DIR="C:/SFML/lib/cmake/SFML" `
          -DCMAKE_VERBOSE_MAKEFILE=ON

    - name: Configure CMake (macOS)
      if: matrix.platform == 'macos'
      run: |
        echo "=== Configuring CMake for macOS (${{ matrix.arch }}) ==="
        
        # Set deployment target (no architecture flags needed - let CMake auto-detect)
        if [[ "${{ matrix.arch }}" == "intel" ]]; then
          export CMAKE_OSX_DEPLOYMENT_TARGET="10.15"
          echo "Configuring for Intel with deployment target 10.15 (matching release workflow)"
        else
          export CMAKE_OSX_DEPLOYMENT_TARGET="11.0"
          echo "Configuring for Apple Silicon with deployment target 11.0"
        fi
        
        # Detect SFML installation location
        HOMEBREW_PREFIX=$(brew --prefix)
        echo "Homebrew prefix: $HOMEBREW_PREFIX"
        
        # Architecture-specific path configuration
        if [[ "${{ matrix.arch }}" == "intel" ]]; then
          # Intel: Use /usr/local (built from source)
          echo "Intel: Using /usr/local paths (built from source)"
          SFML_DIR="/usr/local/lib/cmake/SFML"
          CMAKE_PREFIX_PATH="/usr/local"
          SFML_STATIC="ON"
        else
          # ARM: Use Homebrew or /usr/local fallback
          HOMEBREW_PREFIX=$(brew --prefix)
          echo "ARM: Using Homebrew prefix: $HOMEBREW_PREFIX"
          
          if [[ -d "$HOMEBREW_PREFIX/lib/cmake/sfml" ]]; then
            echo "Found SFML CMake config in Homebrew location (lowercase)"
            SFML_DIR="$HOMEBREW_PREFIX/lib/cmake/sfml"
            CMAKE_PREFIX_PATH="$HOMEBREW_PREFIX"
            SFML_STATIC="OFF"
          elif [[ -d "$HOMEBREW_PREFIX/lib/cmake/SFML" ]]; then
            echo "Found SFML CMake config in Homebrew location (uppercase)"
            SFML_DIR="$HOMEBREW_PREFIX/lib/cmake/SFML"
            CMAKE_PREFIX_PATH="$HOMEBREW_PREFIX"
            SFML_STATIC="OFF"
          elif [[ -d "/usr/local/lib/cmake/SFML" ]]; then
            echo "Found SFML CMake config in /usr/local"
            SFML_DIR="/usr/local/lib/cmake/SFML"
            CMAKE_PREFIX_PATH="/usr/local"
            SFML_STATIC="ON"
          else
            echo "SFML CMake config not found, using default paths"
            SFML_DIR=""
            CMAKE_PREFIX_PATH="$HOMEBREW_PREFIX:/usr/local"
            SFML_STATIC="OFF"
          fi
        fi
        
        echo "CMake configuration parameters:"
        echo "  CMAKE_BUILD_TYPE: ${{env.BUILD_TYPE}}"
        echo "  CMAKE_OSX_DEPLOYMENT_TARGET: $CMAKE_OSX_DEPLOYMENT_TARGET"
        echo "  CMAKE_PREFIX_PATH: $CMAKE_PREFIX_PATH"
        echo "  SFML_DIR: $SFML_DIR"
        echo "  SFML_STATIC_LIBRARIES: $SFML_STATIC"
        
        # Check SFML installation with multiple search paths
        echo "Checking SFML installation:"
        echo "Searching in $CMAKE_PREFIX_PATH for SFML files..."
        for path in $(echo $CMAKE_PREFIX_PATH | tr ':' ' '); do
          echo "Checking path: $path"
          find "$path" -name "*sfml*" -type f 2>/dev/null | head -5 || echo "No SFML files found in $path"
        done
        
        # Check for pkg-config as fallback
        if command -v pkg-config &> /dev/null; then
          echo "Checking pkg-config for SFML:"
          pkg-config --list-all | grep -i sfml || echo "No SFML found via pkg-config"
        fi
        
        # Configure with detected settings
        CMAKE_ARGS="-B ${{github.workspace}}/build \
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=$CMAKE_OSX_DEPLOYMENT_TARGET \
          -DCMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH \
          -DSFML_STATIC_LIBRARIES=$SFML_STATIC \
          -DCMAKE_VERBOSE_MAKEFILE=ON"
        
        if [[ -n "$SFML_DIR" ]]; then
          CMAKE_ARGS="$CMAKE_ARGS -DSFML_DIR=$SFML_DIR"
        fi
        
        echo "Running cmake with: $CMAKE_ARGS"
        cmake $CMAKE_ARGS

    - name: Build (Linux)
      if: matrix.platform == 'linux'
      run: |
        echo "=== Building DeerPortal for Linux ==="
        cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --verbose

    - name: Build (Windows)
      if: matrix.platform == 'windows'
      run: |
        echo "=== Building DeerPortal for Windows ==="
        cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --verbose

    - name: Build (macOS)
      if: matrix.platform == 'macos'
      run: |
        echo "=== Building DeerPortal for macOS (${{ matrix.arch }}) ==="
        cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --verbose -j$(sysctl -n hw.ncpu)

    - name: Test (Linux)
      if: matrix.platform == 'linux'
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{env.BUILD_TYPE}} --verbose

    - name: Test (Windows)
      if: matrix.platform == 'windows'
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{env.BUILD_TYPE}} --verbose

    - name: Test (macOS)
      if: matrix.platform == 'macos'
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{env.BUILD_TYPE}} --verbose

    - name: Create Windows package
      if: matrix.platform == 'windows'
      shell: bash
      run: |
        cd build
        echo "=== Creating Windows package ==="
        echo "Checking if makensis is available:"
        which makensis || echo "makensis not found"
        echo "=== Build directory contents ==="
        ls -la
        echo "=== Looking for DeerPortal executable ==="
        find . -name "DeerPortal*" -type f
        echo "=== Trying make package ==="
        make package || {
          echo "=== make package failed, trying direct CPack ==="
          cpack -G NSIS --verbose || {
            echo "NSIS packaging failed, trying ZIP fallback"
            cpack -G ZIP --verbose || echo "All packaging methods failed"
          }
        }
      
